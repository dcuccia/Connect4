<p>Challenger</p>
<NameEntry @bind-Name="ChallengerName"
           @bind-NameIsValid="challengerNameIsValid"/>

<br/>

<p>Opponent</p>
<NameEntry @bind-Name="OpponentName"
           @bind-NameIsValid="opponentNameIsValid"/>

<br/>

@if (NamesAreValid && !gameStarted)
{
    <button @onclick="StartGame">Start Game!</button>
}

@if(gameStarted)
{
    <button @onclick="Reset">Reset Game</button>
}

<br/>
<br/>

@if (gameStarted && !gameComplete)
{
    <text>@game.NextMove.Name.FirstName</text><text>&#39;s (</text>@game.NextMove.PlayerColor.Value<text>&#39;s) turn!</text>
    <br/>
    <text>Move to column: </text>
    <div>
        <button @onclick="()=>Move(1)">1</button>
        <button @onclick="()=>Move(2)">2</button>
        <button @onclick="()=>Move(3)">3</button>
        <button @onclick="()=>Move(4)">4</button>
        <button @onclick="()=>Move(5)">5</button>
        <button @onclick="()=>Move(6)">6</button>
        <button @onclick="()=>Move(7)">7</button>
    </div>
}

<br/>

@if (!string.IsNullOrWhiteSpace(TurnMessage))
{
    <text>@TurnMessage</text>
}

<br/>

@if (!string.IsNullOrWhiteSpace(BoardStateString))
{
    <textarea rows="7" cols="30">@BoardStateString</textarea>
}

@code
{
    private bool challengerNameIsValid;
    private bool opponentNameIsValid;
    private bool NamesAreValid => challengerNameIsValid && opponentNameIsValid;
    private bool gameStarted = false;
    private bool gameComplete = false;
    private Game game;
    private string BoardStateString { get; set; } = "";
    private string TurnMessage { get; set; } = "";
    private MutableName ChallengerName { get; set; } = new();
    private MutableName OpponentName { get; set; } = new();

    void StartGame()
    {
        var challenger = new Challenger(
            new Name(ChallengerName.FirstName, ChallengerName.LastName));

        var opponent = new Opponent(
            new Name(OpponentName.FirstName, OpponentName.LastName));

        game = new NewGame(challenger, opponent);
        gameStarted = true;
    }

    void Move(int column)
    {
        OneOf<Game, WonGame, DrawGame> updatedGame;

        (updatedGame, TurnMessage, BoardStateString) =  game.Move(new Column(new ValidColumnNumber(column)));

        Action continuation = updatedGame.Value switch
        {
            WonGame or DrawGame => () => { gameComplete = true; return; }, // can't move
            Game g              => () => { game = g; }
        };
        continuation();
    }

    void Reset()
    {
        ChallengerName = new();
        challengerNameIsValid = false;
        OpponentName = new();
        opponentNameIsValid = false;
        gameStarted = false;
        gameComplete = false;
        TurnMessage = "";
        BoardStateString = "";
    }
}
